"""
Here we build a secure way to check if your password has been leaked.
First we need to install requests module. It can be done by pip install requests

requests module allows us to make a request. It is like a browser without having an actual browser. We can manually
request something as if we have a browser, we request something to a server and we get data back

So the way we can use the requests' module with the password api is that we can have the password api url
url  = 'https://api.pwnedpasswords.com/range/' + <password to be checked>
this api can be hit by using the request module as follows:
response = requests.get(url)

if response is 400 then it is bad as it means, unauthorised or something is not right with the api.
response 200 is ok

We got response 400 because this is not the way this api works.
This api uses hashing.The hashing this api uses is SHA1 Hash Generator.
Hashing of password is something you should always do. When we store password of a user in database we should
store it in hashed form.

so actual api url should be

sha1 hash generator link: http://www.sha1-online.com/

url = 'https://api.pwnedpasswords.com/range/' + <sha1 hash of the password that needs to be checked>

but this is still not super secure. As someone would come and keep guessing until you get the same hash.
So, this api uses a technique called K anonymity and this is actually a modern technique that big companies like
google, facebook, netflix, amazon all use

K anonymity allows somebody to receive information about us yet still not know who we are.
It’s built on the idea that by combining sets of data with similar attributes,
identifying information about any one of the individuals contributing to that data can be obscured.
k-Anonymization is often referred to as the power of ‘hiding in the crowd’.
Individuals’ data is pooled in a larger group, meaning information in the group could correspond to any single member,
thus masking the identity of the individual or individuals in question.

In the passwords' database, the passwords are stored as SHA1 Hashes. We send this api First 5 Characters of the
SHA1 Hash of the password we want to check. API Returns all the matching passwords in form of SHA1 hashes. Then
at our end we match the complete hash and get the password related data

so finally api url is
url = 'https://api.pwnedpasswords.com/range/' + <first 5 characters of the sha1 hash key of password to be checked>

So to build this project we need to do:
Create a python script that reads input from command line and print the count of password
A more secure way to do this is to read the password from a file so we will implement that.

Step 1: We import requests module, hashlib module, sys module, re module
Step 2: We create a main() function which will be called when the script is run. The argument will be the filename
passed from command line
Step 3: Then we need to check following things:
    a: file passed must be 1 not more than or less than 1. For this we will create a function and check both things
    b: file passed must be of .txt format. For this we will create a function which will check the file format using
    regex.
    c: file must be present at the specified location and must not be empty. For this we will create a function which
    will check it using the os module.

    All of these functions will be called inside a single function. OR we could create a single function that could
    do all these operations.
Step 4: Then we need to get passwords list from the file. For this we will create a function. We will use the read()
function not readlines() as readlines() accomodates the next line char along all the entries. After reading the file
using read() then we will use splitlines(). This will generate a list of all the lines in the string. We will return
that list as the list generated will be passwords_list.
Step 5: Then we need to check if the password is pwned or not. For this we need a function. In this function we will
generate SHA-1 hash code for the password. This will be done by
hashlib.sha1(password.encode('utf-8')).hexdigest().upper()
After that we split the hash into two parts the first 5 characters and the remaining characters.
In next step we need the api response of the first 5 characters of the hash
for That we need to create a function which will check if the api returns 200 or 400. If api returns 200 then it will
return the response.text
After we received hashes and count from the response we need to match the tail or the remaining part of the hash.
For that we will create a function that will first split the lines of the hashes and count using
response.text.splitlines()
Now we will split each item of the list on basis of ':' using
hash_list = (line.split(':') for line in api_response.text.splitlines())
This generates a generator object.
This generator object will be looped over and the remaining hash code will be mapped and the corresponding count will be
returned.
Step 6: If the count > 0 then print something
else print another thing
"""